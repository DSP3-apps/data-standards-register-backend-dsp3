apply plugin: 'idea'
apply plugin: 'java'
apply from: 'external-dependencies.gradle'
apply from: 'idea-config.gradle'

group 'openregister'

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

repositories {
    mavenCentral()
    maven {
        url 'https://dl.bintray.com/openregister/openregister'
    }
}

//noinspection GroovyAssignabilityCheck
configurations {
    compile.exclude module: 'slf4j-log4j12'
    compile.exclude module: 'slf4j-simple' // dropwizard uses logback, not slf4j-simple
}

dependencies {
    compile dropwizard, stringTemplate, apacheCommonsCodec, awsCloudWatch
    compile jacksonCsv, jena, jerseyMedia, markdown, thymeleaf, verifiableLog
    compile jdbi, jersey_client
    compile(dropwizard_module_java8) {
        exclude group: 'io.dropwizard'
    }
    compile(dropwizard_module_java8_jdbi) {
        exclude group: 'io.dropwizard'
    }
    compile(postgresClient) {
        exclude group: 'org.slf4j'
    }

    testCompile junit, mockito, dropwizardTest, wiremock
    testCompile dropwizardTest, jsoup, jsonAssert
}

jar.baseName = "openregister-java"

jar {
    doFirst {
        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        } {
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }

        manifest {
            attributes(
                    "Main-Class": "uk.gov.RegisterApplication",
                    "Class-Path": configurations.runtime.findAll { !it.directory }.collect { it.name }.join(' ')
            )
        }
    }
}

assemble {
    doLast {
        new File("deploy/openregister-java.jar").bytes = new File("build/libs/openregister-java.jar").bytes
        createDeployableBundle.execute()
    }
}


test {
    dependsOn << compileTestJava
    doLast {
        // loadSchoolDataForConformance.execute()
        // createConformanceTestVenv.execute()
        // installConformanceTestDeps.execute()
        // conformanceTest.execute()
    }
    testLogging {
        exceptionFormat = 'full'
    }
    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

clean.doFirst {
    delete "${rootDir}/.venv/"
}

task createConformanceTestVenv(type: Exec) {
    commandLine 'pyvenv-3.5','.venv'
}

task installConformanceTestDeps(type: Exec) {
    commandLine '.venv/bin/pip', 'install', '-r', 'requirements.txt'
}

task conformanceTest(type: Exec) {
    commandLine '.venv/bin/openregister-conformance', '--no-https', 'http://school.openregister.dev:9000'
}

task createDeployableBundle(type: Zip) {
    Map env = System.getenv()
    baseName("openregister-java-${env.'TRAVIS_BRANCH'}-${env.'TRAVIS_BUILD_NUMBER'}-${env.'TRAVIS_COMMIT'}")
    from('deploy/')
    include('*')
    include('scripts/*')
    destinationDir file('deployable_bundle') // directory that you want your archive to be placed in
}

task(run, type: JavaExec) {
    main = 'uk.gov.register.RegisterApplication'
    classpath = sourceSets.main.runtimeClasspath
    args = ["server", "config.yaml"]
    jvmArgs = ["-DbaseDirForTemplates=$projectDir/src/main/resources"]
}

task(loadSchoolData, type: JavaExec) {
    main = 'uk.gov.register.presentation.functional.testSupport.DBSupport'
    classpath = sourceSets.test.runtimeClasspath
    args = ["school", "school-data.jsonl", "school"]
}

task(loadSchoolDataForConformance, type: JavaExec) {
    doFirst{
        exec{
            executable "$projectDir/drop_schema.sh" args 'ft_openregister_java'
        }
        exec{
            executable "$projectDir/create_schema.sh" args 'ft_openregister_java'
        }
    }
    main = 'uk.gov.register.presentation.functional.testSupport.DBSupport'
    classpath = sourceSets.test.runtimeClasspath
    args = ["school", "school-data.jsonl", "ft_openregister_java"]
}
